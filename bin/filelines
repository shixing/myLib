#!/usr/bin/env python
'''
Author: Xing Shi
'''
import argparse
import numpy as np

def ap():
    # argparse http://docs.python.org/2/library/argparse.html#module-argparse
    parser = argparse.ArgumentParser(description='Descriptions')

    # actions:
    # action='store_const', const=42
    # action='store_true'

    # positional arguments
    parser.add_argument('f', default=None, type=str, help="file")
    # optional arguments
    parser.add_argument(
        '-b', '--bin', default=5, type=int, required=False, help="bin number")
    # version info
    parser.add_argument('--version', action='version', version='%(prog)s 1.0')
    args = vars(parser.parse_args())
    return args


def main():
    args = ap()
    f = open(args['f'])
    nbin = int(args['bin'])
    ln = []
    for line in f:
        ln.append(len(line.split()))
    f.close()
    ln = np.array(ln)
    ln.sort()
    high = np.max(ln)
    low = np.min(ln)
    avg = np.average(ln)
    
    boundary = []
    if nbin > (high - low):
        nbin = high - low
    if nbin == 0:
        nbin = 1
    width = (high - low) * 1.0 / nbin
    for i in xrange(1,nbin):
        b = int(low + i * width)
        boundary.append(b)
    boundary.append(high + 1)

    bi = 0
    count = [0] * nbin
    for l in ln:
        while l >= boundary[bi]:
            bi += 1
        count[bi] += 1 

    mc = max(count)
    maxbar = 10

    def print_bar(c):
        l = int(np.ceil(c*1.0/mc*maxbar))
        print "#"*l,
            

    print "nline: ", len(ln)
    print "Longest Line: ", high
    print "Shortest Line: ", low
    print "Average Line: ", avg
    
    for i in xrange(nbin):
        if i == 0:
            l = low
        else:
            l = boundary[i-1]
        h = boundary[i]
        print "[{},{}) ".format(l,h),
        c = count[i]
        print_bar(c)
        print "{}".format(c)
        


if __name__ == '__main__':
    main()
